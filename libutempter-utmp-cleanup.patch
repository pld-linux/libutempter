--- libutempter-1.1.6/Makefile.orig	2010-11-04 18:14:53.000000000 +0100
+++ libutempter-1.1.6/Makefile	2012-06-23 21:52:49.619216737 +0200
@@ -27,7 +27,7 @@
 STATICLIB = lib$(PROJECT).a
 MAP = lib$(PROJECT).map
 
-TARGETS = $(PROJECT) $(SHAREDLIB) $(STATICLIB)
+TARGETS = $(PROJECT) $(SHAREDLIB) $(STATICLIB) utmp-cleanup
 
 INSTALL = install
 libdir = /usr/lib
@@ -72,6 +72,7 @@
 	$(INSTALL) -p -m644 $(PROJECT).h $(DESTDIR)$(includedir)/
 	$(INSTALL) -p -m755 $(SHAREDLIB) $(DESTDIR)$(libdir)/$(SHAREDLIB).$(VERSION)
 	$(INSTALL) -p -m644 $(STATICLIB) $(DESTDIR)$(libdir)/
+	$(INSTALL) -p -m755 utmp-cleanup $(DESTDIR)$(libexecdir)/$(PROJECT)/
 	ln -s $(SHAREDLIB).$(VERSION) $(DESTDIR)$(libdir)/$(SONAME)
 	ln -s $(SONAME) $(DESTDIR)$(libdir)/$(SHAREDLIB)
 	$(INSTALL) -p -m644 $(PROJECT).3 $(DESTDIR)$(man3dir)/
@@ -81,4 +82,4 @@
 	done
 
 clean:
-	$(RM) $(TARGETS) iface.o iface.os core *~
+	$(RM) $(TARGETS) iface.o iface.os core *~ utmp-cleanup
diff -urN utempter-0.5.3.org/utmp-cleanup.c utempter-0.5.3/utmp-cleanup.c
--- utempter-0.5.3.org/utmp-cleanup.c	1970-01-01 01:00:00.000000000 +0100
+++ utempter-0.5.3/utmp-cleanup.c	2003-12-18 23:33:51.996966369 +0100
@@ -0,0 +1,69 @@
+#include <unistd.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <utmp.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <pwd.h>
+
+int check_entry(struct utmp * ut)
+{
+char buf[100];
+struct stat st;
+struct passwd * pwd;
+int s;
+
+pwd=getpwnam(ut->ut_user);
+	if(!pwd)return 1;
+			
+snprintf(buf,100,"/proc/%d/",ut->ut_pid);
+s=stat(buf,&st);
+	if(s)return 2;
+
+	if(st.st_uid!=pwd->pw_uid && st.st_uid!=0)return 3;
+return 0;
+}
+
+char * msgs[]={"","Nonexistent user","Dead process","Owner mismatch"};
+
+int main(int ac, char ** av)
+{
+int clean=1;
+int justcheck=0;
+int fd;
+char * file="/var/run/utmpx";
+	if(ac>1)file=av[1];
+fd=open(file,O_RDWR,0);
+	if(fd<0){
+	fd=open(file,O_RDONLY,0);
+	justcheck=1;
+	printf("Warning: opening %s read-only\n",file);
+	}
+	
+	if(fd<0){
+	perror("open"); exit(1);
+	}
+
+	while(1){
+	struct utmp ut;
+	int r=read(fd,&ut,sizeof(ut));
+		if(r!=sizeof(ut))break;
+	
+		if(ut.ut_type==USER_PROCESS){
+		int i;	
+			if((i=check_entry(&ut))){
+			clean=0;
+			printf("%s: %d (%s)\n",msgs[i],ut.ut_pid,ut.ut_name);
+			if(justcheck)continue;
+			lseek(fd,-sizeof(ut),SEEK_CUR);
+			bzero(&ut,sizeof(ut));
+			ut.ut_type=DEAD_PROCESS;
+			write(fd,&ut,sizeof(ut));
+			}
+		}
+		
+	}
+
+	if(clean)printf("%s is clean\n",file);
+return 0;
+}
